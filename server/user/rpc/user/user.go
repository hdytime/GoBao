// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package user

import (
	"context"

	"GoBao/server/user/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GenerateTokenReq     = pb.GenerateTokenReq
	GenerateTokenResp    = pb.GenerateTokenResp
	LoginReq             = pb.LoginReq
	LoginResp            = pb.LoginResp
	RegisterReq          = pb.RegisterReq
	RegisterResp         = pb.RegisterResp
	UpdateUserDetailReq  = pb.UpdateUserDetailReq
	UpdateUserDetailResp = pb.UpdateUserDetailResp
	UpdateUserMoneyReq   = pb.UpdateUserMoneyReq
	UpdateUserMoneyResp  = pb.UpdateUserMoneyResp
	UserDetailReq        = pb.UserDetailReq
	UserDetailResp       = pb.UserDetailResp

	User interface {
		GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error)
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		UserDetail(ctx context.Context, in *UserDetailReq, opts ...grpc.CallOption) (*UserDetailResp, error)
		UpdateUserDetail(ctx context.Context, in *UpdateUserDetailReq, opts ...grpc.CallOption) (*UpdateUserDetailResp, error)
		UpdateUserMoney(ctx context.Context, in *UpdateUserMoneyReq, opts ...grpc.CallOption) (*UpdateUserMoneyResp, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GenerateToken(ctx, in, opts...)
}

func (m *defaultUser) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUser) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) UserDetail(ctx context.Context, in *UserDetailReq, opts ...grpc.CallOption) (*UserDetailResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UserDetail(ctx, in, opts...)
}

func (m *defaultUser) UpdateUserDetail(ctx context.Context, in *UpdateUserDetailReq, opts ...grpc.CallOption) (*UpdateUserDetailResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UpdateUserDetail(ctx, in, opts...)
}

func (m *defaultUser) UpdateUserMoney(ctx context.Context, in *UpdateUserMoneyReq, opts ...grpc.CallOption) (*UpdateUserMoneyResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UpdateUserMoney(ctx, in, opts...)
}
