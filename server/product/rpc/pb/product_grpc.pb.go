// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: product.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProductRpc_Recommend_FullMethodName          = "/product.Product_rpc/recommend"
	ProductRpc_SearchProduct_FullMethodName      = "/product.Product_rpc/searchProduct"
	ProductRpc_ProductDetail_FullMethodName      = "/product.Product_rpc/ProductDetail"
	ProductRpc_SeckillList_FullMethodName        = "/product.Product_rpc/SeckillList"
	ProductRpc_SeckillDetail_FullMethodName      = "/product.Product_rpc/SeckillDetail"
	ProductRpc_PreloadCache_FullMethodName       = "/product.Product_rpc/PreloadCache"
	ProductRpc_DeductSeckillStock_FullMethodName = "/product.Product_rpc/DeductSeckillStock"
	ProductRpc_CreateProduct_FullMethodName      = "/product.Product_rpc/CreateProduct"
	ProductRpc_DeleteProduct_FullMethodName      = "/product.Product_rpc/DeleteProduct"
)

// ProductRpcClient is the client API for ProductRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductRpcClient interface {
	// commonProduct
	Recommend(ctx context.Context, in *RecommendReq, opts ...grpc.CallOption) (*RecommendResp, error)
	SearchProduct(ctx context.Context, in *SearchProductReq, opts ...grpc.CallOption) (*SearchProductResp, error)
	ProductDetail(ctx context.Context, in *ProductDetailReq, opts ...grpc.CallOption) (*ProductDetailResp, error)
	// seckillProduct
	SeckillList(ctx context.Context, in *SeckillListReq, opts ...grpc.CallOption) (*SeckillListResp, error)
	SeckillDetail(ctx context.Context, in *SeckillDetailReq, opts ...grpc.CallOption) (*SeckillDetailResp, error)
	PreloadCache(ctx context.Context, in *PreloadCacheReq, opts ...grpc.CallOption) (*PreloadCacheResp, error)
	DeductSeckillStock(ctx context.Context, in *DeductSeckillStockReq, opts ...grpc.CallOption) (*DeductSeckillStockResp, error)
	// storeProduct
	CreateProduct(ctx context.Context, in *CreateProductReq, opts ...grpc.CallOption) (*CreateProductResp, error)
	DeleteProduct(ctx context.Context, in *DeleteProductReq, opts ...grpc.CallOption) (*DeleteProductResp, error)
}

type productRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewProductRpcClient(cc grpc.ClientConnInterface) ProductRpcClient {
	return &productRpcClient{cc}
}

func (c *productRpcClient) Recommend(ctx context.Context, in *RecommendReq, opts ...grpc.CallOption) (*RecommendResp, error) {
	out := new(RecommendResp)
	err := c.cc.Invoke(ctx, ProductRpc_Recommend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) SearchProduct(ctx context.Context, in *SearchProductReq, opts ...grpc.CallOption) (*SearchProductResp, error) {
	out := new(SearchProductResp)
	err := c.cc.Invoke(ctx, ProductRpc_SearchProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) ProductDetail(ctx context.Context, in *ProductDetailReq, opts ...grpc.CallOption) (*ProductDetailResp, error) {
	out := new(ProductDetailResp)
	err := c.cc.Invoke(ctx, ProductRpc_ProductDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) SeckillList(ctx context.Context, in *SeckillListReq, opts ...grpc.CallOption) (*SeckillListResp, error) {
	out := new(SeckillListResp)
	err := c.cc.Invoke(ctx, ProductRpc_SeckillList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) SeckillDetail(ctx context.Context, in *SeckillDetailReq, opts ...grpc.CallOption) (*SeckillDetailResp, error) {
	out := new(SeckillDetailResp)
	err := c.cc.Invoke(ctx, ProductRpc_SeckillDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) PreloadCache(ctx context.Context, in *PreloadCacheReq, opts ...grpc.CallOption) (*PreloadCacheResp, error) {
	out := new(PreloadCacheResp)
	err := c.cc.Invoke(ctx, ProductRpc_PreloadCache_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) DeductSeckillStock(ctx context.Context, in *DeductSeckillStockReq, opts ...grpc.CallOption) (*DeductSeckillStockResp, error) {
	out := new(DeductSeckillStockResp)
	err := c.cc.Invoke(ctx, ProductRpc_DeductSeckillStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) CreateProduct(ctx context.Context, in *CreateProductReq, opts ...grpc.CallOption) (*CreateProductResp, error) {
	out := new(CreateProductResp)
	err := c.cc.Invoke(ctx, ProductRpc_CreateProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) DeleteProduct(ctx context.Context, in *DeleteProductReq, opts ...grpc.CallOption) (*DeleteProductResp, error) {
	out := new(DeleteProductResp)
	err := c.cc.Invoke(ctx, ProductRpc_DeleteProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductRpcServer is the server API for ProductRpc service.
// All implementations must embed UnimplementedProductRpcServer
// for forward compatibility
type ProductRpcServer interface {
	// commonProduct
	Recommend(context.Context, *RecommendReq) (*RecommendResp, error)
	SearchProduct(context.Context, *SearchProductReq) (*SearchProductResp, error)
	ProductDetail(context.Context, *ProductDetailReq) (*ProductDetailResp, error)
	// seckillProduct
	SeckillList(context.Context, *SeckillListReq) (*SeckillListResp, error)
	SeckillDetail(context.Context, *SeckillDetailReq) (*SeckillDetailResp, error)
	PreloadCache(context.Context, *PreloadCacheReq) (*PreloadCacheResp, error)
	DeductSeckillStock(context.Context, *DeductSeckillStockReq) (*DeductSeckillStockResp, error)
	// storeProduct
	CreateProduct(context.Context, *CreateProductReq) (*CreateProductResp, error)
	DeleteProduct(context.Context, *DeleteProductReq) (*DeleteProductResp, error)
	mustEmbedUnimplementedProductRpcServer()
}

// UnimplementedProductRpcServer must be embedded to have forward compatible implementations.
type UnimplementedProductRpcServer struct {
}

func (UnimplementedProductRpcServer) Recommend(context.Context, *RecommendReq) (*RecommendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recommend not implemented")
}
func (UnimplementedProductRpcServer) SearchProduct(context.Context, *SearchProductReq) (*SearchProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchProduct not implemented")
}
func (UnimplementedProductRpcServer) ProductDetail(context.Context, *ProductDetailReq) (*ProductDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductDetail not implemented")
}
func (UnimplementedProductRpcServer) SeckillList(context.Context, *SeckillListReq) (*SeckillListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeckillList not implemented")
}
func (UnimplementedProductRpcServer) SeckillDetail(context.Context, *SeckillDetailReq) (*SeckillDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeckillDetail not implemented")
}
func (UnimplementedProductRpcServer) PreloadCache(context.Context, *PreloadCacheReq) (*PreloadCacheResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreloadCache not implemented")
}
func (UnimplementedProductRpcServer) DeductSeckillStock(context.Context, *DeductSeckillStockReq) (*DeductSeckillStockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeductSeckillStock not implemented")
}
func (UnimplementedProductRpcServer) CreateProduct(context.Context, *CreateProductReq) (*CreateProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedProductRpcServer) DeleteProduct(context.Context, *DeleteProductReq) (*DeleteProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedProductRpcServer) mustEmbedUnimplementedProductRpcServer() {}

// UnsafeProductRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductRpcServer will
// result in compilation errors.
type UnsafeProductRpcServer interface {
	mustEmbedUnimplementedProductRpcServer()
}

func RegisterProductRpcServer(s grpc.ServiceRegistrar, srv ProductRpcServer) {
	s.RegisterService(&ProductRpc_ServiceDesc, srv)
}

func _ProductRpc_Recommend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).Recommend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductRpc_Recommend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).Recommend(ctx, req.(*RecommendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_SearchProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).SearchProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductRpc_SearchProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).SearchProduct(ctx, req.(*SearchProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_ProductDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).ProductDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductRpc_ProductDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).ProductDetail(ctx, req.(*ProductDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_SeckillList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeckillListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).SeckillList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductRpc_SeckillList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).SeckillList(ctx, req.(*SeckillListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_SeckillDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeckillDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).SeckillDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductRpc_SeckillDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).SeckillDetail(ctx, req.(*SeckillDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_PreloadCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreloadCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).PreloadCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductRpc_PreloadCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).PreloadCache(ctx, req.(*PreloadCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_DeductSeckillStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeductSeckillStockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).DeductSeckillStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductRpc_DeductSeckillStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).DeductSeckillStock(ctx, req.(*DeductSeckillStockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductRpc_CreateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).CreateProduct(ctx, req.(*CreateProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductRpc_DeleteProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).DeleteProduct(ctx, req.(*DeleteProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductRpc_ServiceDesc is the grpc.ServiceDesc for ProductRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.Product_rpc",
	HandlerType: (*ProductRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "recommend",
			Handler:    _ProductRpc_Recommend_Handler,
		},
		{
			MethodName: "searchProduct",
			Handler:    _ProductRpc_SearchProduct_Handler,
		},
		{
			MethodName: "ProductDetail",
			Handler:    _ProductRpc_ProductDetail_Handler,
		},
		{
			MethodName: "SeckillList",
			Handler:    _ProductRpc_SeckillList_Handler,
		},
		{
			MethodName: "SeckillDetail",
			Handler:    _ProductRpc_SeckillDetail_Handler,
		},
		{
			MethodName: "PreloadCache",
			Handler:    _ProductRpc_PreloadCache_Handler,
		},
		{
			MethodName: "DeductSeckillStock",
			Handler:    _ProductRpc_DeductSeckillStock_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _ProductRpc_CreateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _ProductRpc_DeleteProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.proto",
}
