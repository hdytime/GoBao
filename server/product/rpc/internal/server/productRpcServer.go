// Code generated by goctl. DO NOT EDIT.
// Source: product.proto

package server

import (
	"context"

	"GoBao/server/product/rpc/internal/logic"
	"GoBao/server/product/rpc/internal/svc"
	"GoBao/server/product/rpc/pb"
)

type ProductRpcServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedProductRpcServer
}

func NewProductRpcServer(svcCtx *svc.ServiceContext) *ProductRpcServer {
	return &ProductRpcServer{
		svcCtx: svcCtx,
	}
}

// commonProduct
func (s *ProductRpcServer) Recommend(ctx context.Context, in *pb.RecommendReq) (*pb.RecommendResp, error) {
	l := logic.NewRecommendLogic(ctx, s.svcCtx)
	return l.Recommend(in)
}

func (s *ProductRpcServer) SearchProduct(ctx context.Context, in *pb.SearchProductReq) (*pb.SearchProductResp, error) {
	l := logic.NewSearchProductLogic(ctx, s.svcCtx)
	return l.SearchProduct(in)
}

func (s *ProductRpcServer) ProductDetail(ctx context.Context, in *pb.ProductDetailReq) (*pb.ProductDetailResp, error) {
	l := logic.NewProductDetailLogic(ctx, s.svcCtx)
	return l.ProductDetail(in)
}

// seckillProduct
func (s *ProductRpcServer) SeckillList(ctx context.Context, in *pb.SeckillListReq) (*pb.SeckillListResp, error) {
	l := logic.NewSeckillListLogic(ctx, s.svcCtx)
	return l.SeckillList(in)
}

func (s *ProductRpcServer) SeckillDetail(ctx context.Context, in *pb.SeckillDetailReq) (*pb.SeckillDetailResp, error) {
	l := logic.NewSeckillDetailLogic(ctx, s.svcCtx)
	return l.SeckillDetail(in)
}

func (s *ProductRpcServer) PreloadCache(ctx context.Context, in *pb.PreloadCacheReq) (*pb.PreloadCacheResp, error) {
	l := logic.NewPreloadCacheLogic(ctx, s.svcCtx)
	return l.PreloadCache(in)
}

func (s *ProductRpcServer) DeductSeckillStock(ctx context.Context, in *pb.DeductSeckillStockReq) (*pb.DeductSeckillStockResp, error) {
	l := logic.NewDeductSeckillStockLogic(ctx, s.svcCtx)
	return l.DeductSeckillStock(in)
}

// storeProduct
func (s *ProductRpcServer) CreateProduct(ctx context.Context, in *pb.CreateProductReq) (*pb.CreateProductResp, error) {
	l := logic.NewCreateProductLogic(ctx, s.svcCtx)
	return l.CreateProduct(in)
}

func (s *ProductRpcServer) DeleteProduct(ctx context.Context, in *pb.DeleteProductReq) (*pb.DeleteProductResp, error) {
	l := logic.NewDeleteProductLogic(ctx, s.svcCtx)
	return l.DeleteProduct(in)
}
